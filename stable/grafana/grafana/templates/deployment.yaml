apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "grafana.fullname" . }}
  labels:
    app: {{ template "grafana.name" . }}
    chart: {{ template "grafana.chart" . }}
    release: {{ .Release.Name }}
    instance: {{ .Values.Instance | quote }}
    instanceID: {{ .Values.SLATE.Instance.ID | quote  }}
{{- with .Values.annotations }}
  annotations:
{{ toYaml . | indent 4 }}
{{- end }}

spec:
  replicas: 1 
  selector:
    matchLabels:
      app: {{ template "grafana.name" . }}
      chart: {{ template "grafana.chart" . }}
      release: {{ .Release.Name }}
      instance: {{ .Values.Instance | quote }}
  strategy:
    type: RollingUpdate 
  template:
    metadata:
      labels:
        app: {{ template "grafana.name" . }}
        chart: {{ template "grafana.chart" . }}
        release: {{ .Release.Name }}
        instance: {{ .Values.Instance | quote }}
{{- with .Values.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
{{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
{{- end }}
      securityContext:
        runAsUser: 472
        fsGroup: 472
{{- if .Values.dashboards }}
      initContainers:
        - name: download-dashboards
          image: "appropriate/curl:latest"
          imagePullPolicy: IfNotPresent
          command: ["sh", "/etc/grafana/download_dashboards.sh"]
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/download_dashboards.sh"
              subPath: download_dashboards.sh
            - name: storage
              mountPath: "/var/lib/grafana"
              subPath: "" 
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "grafana/grafana:6.0.2"
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: config
              mountPath: "/etc/grafana/grafana.ini"
              subPath: grafana.ini
            - name: ldap
              mountPath: "/etc/grafana/ldap.toml"
              subPath: ldap.toml
{{- if .Values.dashboards }}
  {{- range $provider, $dashboards := .Values.dashboards }}
    {{- range $key, $value := $dashboards }}
      {{- if hasKey $value "json" }}
            - name: dashboards-{{ $provider }}
              mountPath: "/var/lib/grafana/dashboards/{{ $provider }}/{{ $key }}.json"
              subPath: "{{ $key }}.json"
      {{- end }}
    {{- end }}
  {{- end }}
{{- end -}}
{{- if .Values.dashboardsConfigMaps }}
  {{- range keys .Values.dashboardsConfigMaps }}
            - name: dashboards-{{ . }}
              mountPath: "/var/lib/grafana/dashboards/{{ . }}"
  {{- end }}
{{- end }}
{{- if .Values.datasources }}
            - name: config
              mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
              subPath: datasources.yaml
{{- end }}
{{- if .Values.dashboardProviders }}
            - name: config
              mountPath: "/etc/grafana/provisioning/dashboards/dashboardproviders.yaml"
              subPath: dashboardproviders.yaml
{{- end }}
            - name: storage
              mountPath: "/var/lib/grafana"
              subPath: "" 
          ports:
            - name: service
              containerPort: {{ .Values.Service.Port }}
              protocol: TCP
            - name: grafana
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "grafana.fullname" . }}
                  key: admin-password
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
            failureThreshold: 10
            periodSeconds: 10
          resources:
      volumes:
        - name: config
          configMap:
            name: {{ template "grafana.fullname" . }}
        {{- if .Values.dashboards }}
          {{- range keys .Values.dashboards }}
        - name: dashboards-{{ . }}
          configMap:
            name: {{ template "grafana.fullname" $ }}-dashboards-{{ . }}
          {{- end }}
        {{- end }}
        {{- if .Values.dashboardsConfigMaps }}
          {{- range $provider, $name := .Values.dashboardsConfigMaps }}
        - name: dashboards-{{ $provider }}
          configMap:
            name: {{ $name }}
          {{- end }}
        {{- end }}
        - name: ldap
          secret:
            secretName: {{ template "grafana.fullname" . }}
            items:
              - key: ldap-toml
                path: ldap.toml
        - name: storage
          emptyDir: {}

