apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "osg-frontier-squid.fullname" . }}
  labels:
    app: {{ template "osg-frontier-squid.name" . }}
    release: {{ .Release.Name }}
    instance: {{ .Values.Instance | quote }}
data:
  60-customization.awk: |
    # Always set the monitoring IP range
    setoption("acl HOST_MONITOR src", "{{ .Values.SquidConf.MonitoringIPRange }}")
    # Always set the visible hostname
    setoption("visible_hostname", "'`uname -n`'/${process_number}")
    {{- if .Values.SquidConf.RESTRICT_DEST }}
    # Restrict destination addresses
    setoptionparameter("acl RESTRICT_DEST", 3, "{{ .Values.SquidConf.RESTRICT_DEST }}")
    uncomment("http_access deny !RESTRICT_DEST")
    {{- end }}
    {{- if .Values.SquidConf.Cpu_Affinity_Map }}
    # Set the CPU affinity map
    setoption("cpu_affinity_map", "{{ .Values.SquidConf.Cpu_Affinity_Map }}")
    {{- end }}
    {{- if .Values.SquidConf.Logfile_Rotate }}
    # Whether to rotate logs or not
    setoption("logfile_rotate", "{{ .Values.SquidConf.Logfile_Rotate }}")
    {{- end }}
    {{- if .Values.SquidConf.MaximumObjectSizeInMemory }}
    # Allow the user to set the maximum object size in memory
    setoption("maximum_object_size_in_memory", "{{ .Values.SquidConf.MaximumObjectSizeInMemory }} KB")
    {{ end }}
    {{- if .Values.SquidConf.Workers }}
    # If multiple workers are requested
    {{- if .Values.SquidConf.DisableLogging }}
    # If multiple workers are used, and logging is disabled:
    setoption("access_log", "none")
    {{- else -}}
    # Otherwise, create a log for each child process:
    setoptionparameter("logformat awstats", 3, "kid${process_number}")
    {{ end }}
    # Set the number of workers and create a cache for each unique worker
    setoption("workers", {{ .Values.SquidConf.Workers }} )
    setoption("cache_dir", "ufs /var/cache/squid/squid${process_number} {{ .Values.SquidConf.CacheSize }} 16 256")
    {{ else }}
    # If multiple workers are NOT requested, set a single cache dir with one of
    # three options: 
    #  1. Cache with a minimum object size OR
    #  2. Cache with the disk cache disabled entirely OR
    #  3. Cache with no special parameters (default).
    {{ if .Values.SquidConf.DiskCacheMinObjSize }}
    setoption("cache_dir", "ufs /var/cache/squid/squid {{ .Values.SquidConf.CacheSize }} 16 256 min_size={{ .Values.SquidConf.DiskCacheMinObjSize }}")
    {{ else if .Values.SquidConf.DisableDiskCache }}
    setoptionparameter("cache_dir", 1, "null")
    {{ else }}
    setoption("cache_dir", "ufs /var/cache/squid/squid {{ .Values.SquidConf.CacheSize }} 16 256")
    {{ end }} 
    {{- if .Values.SquidConf.DisableLogging }}
    # Let the user enable/disable logging for a single worker case
    setoption("access_log", "none")
    {{- end }}
    {{ end }}
# The below 60-image-post-init.sh script is not mounted and the above new script takes care of the customization needed
# 2-3 setttings are done vai env vars as per the OSG docs
  60-image-post-init.sh: |+
    echo "Generating squid.conf..."
    grep -v cache_dir /etc/squid/squid.conf.frontierdefault > /etc/squid/squid.conf
    echo '
    acl NET_LOCAL src {{ .Values.SquidConf.IPRange }}
    {{ if .Values.SquidConf.MonitoringIPRange }}
    acl HOST_MONITOR src {{ .Values.SquidConf.MonitoringIPRange }}
    {{ end }}
    cache_mem {{ .Values.SquidConf.CacheMem }} MB
    {{ if .Values.SquidConf.Workers }}
    workers {{ .Values.SquidConf.Workers }} # multiple worker case
    cache_dir ufs /var/cache/squid/squid${process_number} {{ .Values.SquidConf.CacheSize }} 16 256
    logformat awstats %>a kid${process_number} %un [%{%d/%b/%Y:%H:%M:%S}tl.%03tu %{%z}tl] "%rm %ru HTTP/%rv" %>Hs %<st %Ss:%Sh %tr "%{X-Frontier-Id}>h %{cvmfs-info}>h" "%{Referer}>h" "%{User-Agent}>h"
    visible_hostname '`uname -n`'/${process_number}
    {{ else }} # single worker case
    cache_dir ufs /var/cache/squid {{ .Values.SquidConf.CacheSize }} 16 256
    {{ end }}
    {{ if .Values.SquidConf.Cpu_Affinity_Map }}
    cpu_affinity_map {{ .Values.SquidConf.Cpu_Affinity_Map }}
    {{ end }}
    {{ if .Values.SquidConf.Logfile_Rotate }}
    logfile_rotate {{ .Values.SquidConf.Logfile_Rotate }}
    {{ end }}
    acl URN proto URN
    http_access deny URN
    ' >> /etc/squid/squid.conf
    
    {{ if .Values.SquidConf.Workers }}
    chown -R squid:squid /var/cache/squid
    if [[ ! -d /var/cache/squid/squid0/00 ]]; then
      for kid in $(seq 0 {{ .Values.SquidConf.Workers }}); do
        echo "Initializing cache for worker $kid..."
        grep -v cache_dir /etc/squid/squid.conf.frontierdefault > squid_init.conf
        echo "cache_dir ufs /var/cache/squid/squid${kid} {{ .Values.SquidConf.CacheSize }} 16 256" >> squid_init.conf
        /usr/sbin/squid -N -f squid_init.conf -z
        rm squid_init.conf
      done
    fi
    rm -f /dev/shm/squid-*.shm
    {{ else }}
    if [[ ! -d /var/cache/squid/00 ]]; then
        echo "Initializing cache..."
        /usr/sbin/squid -N -f /etc/squid/squid.conf -z
    fi
    {{ end }}
    echo "End of custom 60-image-post-init.sh"
{{ if .Values.SquidConf.LogToStdout }}
  # Inject an extra helper to copy the squid logs to supervisor's stdout, 
  # where Docker can capture them. 
  50-squid-log-dump.conf: |+
    [program:squid-log-dump]
    command=/bin/sh -c "until [ -f /var/log/squid/access.log ]; do sleep 1; done; tail -n 0 -F /var/log/squid/access.log"
    user=squid
    autorestart=true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
{{ end }}
{{ if .Values.SquidConf.CleanLog }}
  # Truncates log file every 2 min 
  55-squid-log-clean.conf: |+
    [program:squid-log-trunc]
    command=/bin/sh -c "while true; do truncate -s 0 /var/log/squid/access.log; sleep 120; done "
    user=squid
    autorestart=true
    stdout_logfile=/dev/stdout
    stdout_logfile_maxbytes=0
{{ end }}
  squid-pre-stop-alarm.sh: |+
    #!/bin/sh
    
    usage () {
        echo "$0 <instance> <host> <site>"
        echo "   <instance> is SLATE instance ID."
        echo "   <host> can be obtained from K8s variables."
        echo "   <site> is SLATE site name."
    }
    
    
    if [ $# -lt 3 ]; then
        usage
        exit 1
    fi

    instance=$1
    host=$2
    site=$3
    
    
    echo $instance $host $site
    curl --request POST "https://aaas.atlas-ml.org/alarm" \
         -k \
         --header 'Content-Type: application/json' \
         --data-raw '{ "category" : "SLATE", "subcategory": "Squid", "event": "server down", "tags":"'"$site"'", "body":"down", "source": {"site": "'"$site"'", "instance": "'"$instance"'", "host": "'"$host"'"} }'
